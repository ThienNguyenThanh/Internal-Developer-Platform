import * as cdk from "aws-cdk-lib";
import * as ec2 from "aws-cdk-lib/aws-ec2";
import * as rds from "aws-cdk-lib/aws-rds";
import { Construct } from "constructs";

export interface CdkBaseStackProps extends cdk.StackProps {
  vpcId: string;
  dbName?: string;
  rdsId?: string;
}

export class CdkRdsModuleStack extends cdk.Stack {
  public readonly vpc: ec2.IVpc;
  public readonly rdsInstance: rds.DatabaseInstance;

  constructor(scope: Construct, id: string, props: CdkBaseStackProps) {
    super(scope, id, props);

    this.vpc = ec2.Vpc.fromLookup(this, "VPC", { vpcId: props.vpcId });

    // finally, lets configure and create our database!
    const rdsConfig: rds.DatabaseInstanceProps = {
      engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_13_7 }),
      instanceType: ec2.InstanceType.of(ec2.InstanceClass.M6I, ec2.InstanceSize.LARGE),

      vpc: this.vpc,

      vpcSubnets: {
        subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS,
      },
      maxAllocatedStorage: 200,

      databaseName: props.dbName,
    };

    // create the instance
    this.rdsInstance = new rds.DatabaseInstance(this, props.rdsId ?? "rdsInstance", rdsConfig);

    // allow connections from within the VPC
    this.rdsInstance.connections.allowDefaultPortFrom(
      {
        connections: new ec2.Connections({
          peer: ec2.Peer.ipv4(this.vpc.vpcCidrBlock),
        }),
      },
      `Allow connections from within VPC ${this.vpc.vpcId}`
    );

    // Output the endpoint and connection info so we can connect!
    new cdk.CfnOutput(this, "bawsRdsArn", {
      description: "Arn for the RDS database instance",
      value: this.rdsInstance.instanceArn,
    });
    // The DB Admin secret is automatically generated by the rds.DatabaseInstance construct 
    // when it's not provided in the rds.DatabaseInstanceProps
    new cdk.CfnOutput(this, "bawsDbAdminSecretArn", {
      description: "Arn for the SecretsManager secret containing RDS DB Admin credentials",
      value: this.rdsInstance.secret!.secretArn,
    });
    new cdk.CfnOutput(this, "bawsDbEndpoint", {
      description: "Connection endpoint for the RDS database instance",
      value: this.rdsInstance.dbInstanceEndpointAddress,
    });
    new cdk.CfnOutput(this, "bawsDbPort", {
      description: "Connection port for the RDS database instance",
      value: this.rdsInstance.dbInstanceEndpointPort,
    });
  }
}
